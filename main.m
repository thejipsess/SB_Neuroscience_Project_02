clear; close all; clc; 

% Set the general settings:
audio = 'Audio/in/stim288.mat';
optimise = false;
iterations = 1;
FS = 16e3;
channels_list = [4, 8, 10, 16, 22];

% Run vocoder for all channel configurations
for i = 1:length(channels_list)
    n_channels = channels_list(i);
    if n_channels > 9
        channel_spacing = strcat(num2str(n_channels),"-electrodes");
    else
        channel_spacing = 'default';
    end
    
    % Run the vocoder to generate CI sound
    [stim_CI, config, labels] = vocoder(audio, FS, n_channels, channel_spacing, 420, 'NOISE', 0, optimise, iterations);
    
    % Save output
    savename = strcat('Audio/out/numeric_stim_CI_', num2str(n_channels),'Channels_160_reverse', num2str(iterations));
    save(savename,'FS','stim_CI','labels', '-v7.3');
    disp(strcat("saved: ", savename))
end

%% Feature extraction and speech classification
% This section extracts the spectral features from one or more defined audio
% segments, for example the audio segments generated by the CI model in the
% section above. Then it runs a classification task. Make sure to set the
% correct labels for the audio segments you want to classify.

%Here set the audio file you want extract spectral features from
files = ["Audio/out/numeric_stim_CI_22Channels_160_lin1.mat",...
    "Audio/out/numeric_stim_CI_22Channels_420_lin1.mat",...
    "Audio/out/numeric_stim_CI_22Channels_160_reverse1.mat",...
    "Audio/out/numeric_stim_CI_22Channels_420_reverse1.mat"];

% Set the labels to classify, this depends on the audio that you use.
labels = repelem([0:9],200);

%  Initialise variables
all_scores = zeros(5,250);
features = zeros(length(n_channels), 2000, 98, 4);

% Load the python environment
pyenv('Version' , 'C:\Users\The Jipsess\AppData\Local\Programs\Python\Python37\python.exe')

for i = 1:length(files)
    %Here data produced by CI model is loaded
    filename_out = 'Features/validationFeatures.mat';
    filename_in = files(i);
    start = 0;
    finish = 2000;

    %this function uses matlab code, so index starts at 1
    [~, features_spectral, ~] = load_data_optimized(filename_in, filename_out, start+1, finish, FS);
    features(i, :, :, :) = features_spectral;

    % Here python code is runned - make sure you have an appropirate python
    % environment setup with the required packages.
    % When using Linux the following two lines should be uncommented
    % py.sys.setdlopenflags(int32(10));
    % py.importlib.import_module('ssl');

    %Here the classifier is run. This uses python code
    [scores, ~, ~] = classifier(features_spectral, labels, start, finish, 'rbf', labels(start+1:finish));
    % Store all classification accuracies
    all_scores(i,:) = scores;
end

%accuracy = mean(scores)*100;

% plot results
boxplot(all_scores', n_channels);

